import os

from decouple import config

SOURCE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(SOURCE_DIR)

REDIS_ADDRESS = config('REDIS_ADDRESS', default='localhost')
REDIS_PORT = config('REDIS_PORT', default='6379')
REDIS_EXPIRATION_TIME = config('REDIS_EXPIRATION_TIME', default=30)

TRACER_REPORTING_HOST = config('TRACER_REPORTING_HOST', default='localhost')
TRACER_REPORTING_PORT = config('TRACER_REPORTING_PORT', default='6831')

SERVICE_STREAM_KEY = config('SERVICE_STREAM_KEY')


EVENT_GENERATOR_TYPE = config('EVENT_GENERATOR_TYPE', default='RngEarlyFiltering')
PUBLISHER_ID = config('PUBLISHER_ID')
PUBLISHER_INPUT_SOURCE = config('PUBLISHER_INPUT_SOURCE')
PUBLISHER_FPS = config('PUBLISHER_FPS')

PUBLISHER_RESOLUTION = config('PUBLISHER_RESOLUTION')
PUBLISHER_WIDTH, PUBLISHER_HEIGHT = [int(v) for v in PUBLISHER_RESOLUTION.split('x')]


LISTEN_EVENT_TYPE_EARLY_FILTERING_UPDATED = config('LISTEN_EVENT_TYPE_EARLY_FILTERING_UPDATED')
# LISTEN_EVENT_TYPE_OTHER_EVENT_TYPE = config('LISTEN_EVENT_TYPE_OTHER_EVENT_TYPE')

SERVICE_CMD_KEY_LIST = [
    LISTEN_EVENT_TYPE_EARLY_FILTERING_UPDATED,
    # LISTEN_EVENT_TYPE_OTHER_EVENT_TYPE,
]

# PUB_EVENT_TYPE_NEW_EVENT_TYPE = config('PUB_EVENT_TYPE_NEW_EVENT_TYPE')

PUB_EVENT_LIST = [
    # PUB_EVENT_TYPE_NEW_EVENT_TYPE,
]

# Only for Content Extraction services
SERVICE_DETAILS = None

# Example of how to define SERVICE_DETAILS from env vars:
# SERVICE_DETAILS_SERVICE_TYPE = config('SERVICE_DETAILS_SERVICE_TYPE')
# SERVICE_DETAILS_STREAM_KEY = config('SERVICE_DETAILS_STREAM_KEY')
# SERVICE_DETAILS_QUEUE_LIMIT = config('SERVICE_DETAILS_QUEUE_LIMIT', cast=int)
# SERVICE_DETAILS_THROUGHPUT = config('SERVICE_DETAILS_THROUGHPUT', cast=float)
# SERVICE_DETAILS_ACCURACY = config('SERVICE_DETAILS_ACCURACY', cast=float)
# SERVICE_DETAILS_ENERGY_CONSUMPTION = config('SERVICE_DETAILS_ENERGY_CONSUMPTION', cast=float)
# SERVICE_DETAILS_CONTENT_TYPES = config('SERVICE_DETAILS_CONTENT_TYPES', cast=Csv())
# SERVICE_DETAILS = {
#     'service_type': SERVICE_DETAILS_SERVICE_TYPE,
#     'stream_key': SERVICE_DETAILS_STREAM_KEY,
#     'queue_limit': SERVICE_DETAILS_QUEUE_LIMIT,
#     'throughput': SERVICE_DETAILS_THROUGHPUT,
#     'accuracy': SERVICE_DETAILS_ACCURACY,
#     'energy_consumption': SERVICE_DETAILS_ENERGY_CONSUMPTION,
#     'content_types': SERVICE_DETAILS_CONTENT_TYPES
# }

LOGGING_LEVEL = config('LOGGING_LEVEL', default='DEBUG')